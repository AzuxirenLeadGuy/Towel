using System;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using Towel;
using static Towel.Statics;

namespace Towel_Generating
{
	public static class LinkGenerator
	{
		public static string Run(int dimensions = 7)
		{
			string generatorPath = Path.GetRelativePath(Path.Combine(Path.GetDirectoryName(sourcefilepath()), "..", ".."), sourcefilepath());

			StringBuilder code = new();
			code.AppendLine($@"//------------------------------------------------------------------------------");
			code.AppendLine($@"// <auto-generated>");
			code.AppendLine($@"// This code was generated from ""{generatorPath}"".");
			code.AppendLine($@"// </auto-generated>");
			code.AppendLine($@"//------------------------------------------------------------------------------");
			code.AppendLine($@"");
			code.AppendLine($@"using System;");
			code.AppendLine($@"using static Towel.Statics;");
			code.AppendLine($@"");
			code.AppendLine($@"namespace Towel.DataStructures");
			code.AppendLine($@"{{");
			code.AppendLine($@"	/// <summary>Represents a link between objects.</summary>");
			code.AppendLine($@"	public interface Link : IDataStructure<object>, System.Runtime.CompilerServices.ITuple");
			code.AppendLine($@"	{{");
			code.AppendLine($@"");
			code.AppendLine($@"	}}");
			for (int i = 1, I = 2; i <= dimensions; i++, I++)
			{
				code.AppendLine($@"");
				code.AppendLine($@"	/// <summary>Represents a link between objects.</summary>");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"	/// <typeparam name=""T<#= j #>"">The type of #<#= j #> element in the link.</typeparam>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"	public class Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"		, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		> : Link");
				code.AppendLine($@"	{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		internal T<#= j #> __<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Constructors");
				code.AppendLine($@"		");
				code.AppendLine($@"		/// <summary>");
				code.AppendLine($@"		/// Creates a link between objects.");
				code.AppendLine($@"		/// <para>Runtime: O(1)</para>");
				code.AppendLine($@"		/// </summary>");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		/// <param name=""_<#= j #>"">The #<#= j #> item to be linked.</param>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		public Link(T1 _1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #> _<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			this.__<#= j #> = _<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"		");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Properties");
				code.AppendLine($@"		");
				code.AppendLine($@"		/// <summary>");
				code.AppendLine($@"		/// The number of objects in the tuple.");
				code.AppendLine($@"		/// <para>Runtime: O(1)</para>");
				code.AppendLine($@"		/// </summary>");
				code.AppendLine($@"		public int Size => <#= i #>;");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		/// <summary>The #<#= j #> item in the link.</summary>");
				code.AppendLine($@"		public T<#= j #> _<#= j #> {{ get => __<#= j #>; set => __<#= j #> = value; }}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Operators");
				code.AppendLine($@"<# if (i < 8) {{ #>");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""tuple"">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>");
				code.AppendLine($@"		/// <returns>The resulting Towel.DataStructures.Link.</returns>");
				code.AppendLine($@"		public static explicit operator Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> tuple)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>(tuple.Item1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, tuple.Item<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""link"">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>");
				code.AppendLine($@"		/// <returns>The resulting System.ValueTuple.</returns>");
				code.AppendLine($@"		public static explicit operator System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> link)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)link._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, (T<#= j #>)link._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""tuple"">The System.Tuple to convert into a Towel.DataStructures.Link.</param>");
				code.AppendLine($@"		/// <returns>The resulting Towel.DataStructures.Link.</returns>");
				code.AppendLine($@"		public static explicit operator Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> tuple)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>(tuple.Item1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, tuple.Item<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""link"">The Towel.DataStructures.Link to convert into a System.Tuple.</param>");
				code.AppendLine($@"		/// <returns>The resulting System.Tuple.</returns>");
				code.AppendLine($@"		public static explicit operator System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> link)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)link._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, (T<#= j #>)link._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Methods");
				code.AppendLine($@"");
				code.AppendLine($@"		System.Collections.IEnumerator");
				code.AppendLine($@"			System.Collections.IEnumerable.GetEnumerator()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			yield return this._<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"		");
				code.AppendLine($@"		System.Collections.Generic.IEnumerator<object>");
				code.AppendLine($@"			System.Collections.Generic.IEnumerable<object>.GetEnumerator()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			yield return this._<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Gets an array with all the types contained in this link in respective order.</summary>");
				code.AppendLine($@"		/// <returns>An array of all the types in this link in respective order.</returns>");
				code.AppendLine($@"		public System.Type[] Types()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.Type[]");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				typeof(T1)");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, typeof(T<#= j #>)");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			}};");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Checks to see if a given object is in this data structure.</summary>");
				code.AppendLine($@"		/// <param name=""item"">The item to check for.</param>");
				code.AppendLine($@"		/// <param name=""compare"">Delegate representing comparison technique.</param>");
				code.AppendLine($@"		/// <returns>true if the item is in this structure; false if not.</returns>");
				code.AppendLine($@"		public	bool Contains(object item, Func<object, object, CompareResult> compare)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (compare(this._<#= j #>, item) == CompareResult.Equal)");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				return true;");
				code.AppendLine($@"			}}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return false;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <inheritdoc/>");
				code.AppendLine($@"		public StepStatus StepperBreak<TStep>(TStep step = default)");
				code.AppendLine($@"			where TStep : struct, IFunc<object, StepStatus>");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (step.Do(_<#= j #>) is Break)");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				return Break;");
				code.AppendLine($@"			}}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return Continue;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Creates a shallow clone of this data structure.</summary>");
				code.AppendLine($@"		/// <returns>A shallow clone of this data structure.</returns>");
				code.AppendLine($@"		public	IDataStructure<object> Clone()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new Link<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)this._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, this._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts the structure into an array.</summary>");
				code.AppendLine($@"		/// <returns>An array containing all the item in the structure.</returns>");
				code.AppendLine($@"		public	object[] ToArray()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new object[]");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				this._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, this._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			}};");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Default hashing function for the Towel.DataStructures.Link.</summary>");
				code.AppendLine($@"		/// <returns>The computed hash code.</returns>");
				code.AppendLine($@"		public override int GetHashCode()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return this._1.GetHashCode()");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				^ this._<#= j #>.GetHashCode()");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Default equals method for Towel.DataStructures.Link.</summary>");
				code.AppendLine($@"		/// <returns>Whether this object and the provided obj are value equal.</returns>");
				code.AppendLine($@"		public override bool Equals(object obj)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (!(obj as Link<T1");
				code.AppendLine($@"<# for (int k = 2; k <= i; k++) {{ #>");
				code.AppendLine($@"				, T<#= k #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>)._<#= j #>.Equals(this._<#= j #>))");
				code.AppendLine($@"				return false;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return true;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"	}}");
				code.AppendLine($@"");
				code.AppendLine($@"	/// <summary>Represents a link between objects.</summary>");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"	/// <typeparam name=""T<#= j #>"">The type of #<#= j #> element in the link.</typeparam>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"	public struct LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"		, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		> : Link");
				code.AppendLine($@"	{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		internal T<#= j #> __<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Constructors");
				code.AppendLine($@"		");
				code.AppendLine($@"		/// <summary>");
				code.AppendLine($@"		/// Creates a link between objects.");
				code.AppendLine($@"		/// <para>Runtime: O(1)</para>");
				code.AppendLine($@"		/// </summary>");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		/// <param name=""_<#= j #>"">The #<#= j #> item to be linked.</param>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		public LinkStruct(T1 _1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #> _<#= j #>");
				code.AppendLine($@"<# }} #>)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			this.__<#= j #> = _<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"		");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Properties");
				code.AppendLine($@"		");
				code.AppendLine($@"		/// <summary>");
				code.AppendLine($@"		/// The number of objects in the tuple.");
				code.AppendLine($@"		/// <para>Runtime: O(1)</para>");
				code.AppendLine($@"		/// </summary>");
				code.AppendLine($@"		public	int Size => <#= i #>;");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"		/// <summary>The #<#= j #> item in the link.</summary>");
				code.AppendLine($@"		public T<#= j #> _<#= j #> {{ get => __<#= j #>; set => __<#= j #> = value; }}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Operators");
				code.AppendLine($@"<# if (i < 8) {{ #>");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""tuple"">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>");
				code.AppendLine($@"		/// <returns>The resulting Towel.DataStructures.LinkStruct.</returns>");
				code.AppendLine($@"		public static explicit operator LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>, T<#= j #><# }} #>> tuple)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>(tuple.Item1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, tuple.Item<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""link"">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>");
				code.AppendLine($@"		/// <returns>The resulting System.ValueTuple.</returns>");
				code.AppendLine($@"		public static explicit operator System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				> link)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.ValueTuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)link._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, (T<#= j #>)link._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""tuple"">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>");
				code.AppendLine($@"		/// <returns>The resulting Towel.DataStructures.LinkStruct.</returns>");
				code.AppendLine($@"		public static explicit operator LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> tuple)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>(tuple.Item1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, tuple.Item<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>");
				code.AppendLine($@"		/// <param name=""link"">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>");
				code.AppendLine($@"		/// <returns>The resulting System.Tuple.</returns>");
				code.AppendLine($@"		public static explicit operator System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			>(LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"			, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			> link)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.Tuple<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)link._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, (T<#= j #>)link._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"");
				code.AppendLine($@"		#region Methods");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>");
				code.AppendLine($@"		System.Collections.IEnumerator");
				code.AppendLine($@"			System.Collections.IEnumerable.GetEnumerator()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			yield return this._<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>");
				code.AppendLine($@"		System.Collections.Generic.IEnumerator<object>");
				code.AppendLine($@"			System.Collections.Generic.IEnumerable<object>.GetEnumerator()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			yield return this._<#= j #>;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Gets an array with all the types contained in this link in respective order.</summary>");
				code.AppendLine($@"		/// <returns>An array of all the types in this link in respective order.</returns>");
				code.AppendLine($@"		public System.Type[] Types()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new System.Type[]");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				typeof(T1)");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, typeof(T<#= j #>)");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			}};");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Checks to see if a given object is in this data structure.</summary>");
				code.AppendLine($@"		/// <param name=""item"">The item to check for.</param>");
				code.AppendLine($@"		/// <param name=""compare"">Delegate representing comparison technique.</param>");
				code.AppendLine($@"		/// <returns>true if the item is in this structure; false if not.</returns>");
				code.AppendLine($@"		public	bool Contains(object item, Func<object, object, CompareResult> compare)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (compare(this._<#= j #>, item) == CompareResult.Equal)");
				code.AppendLine($@"				return true;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return false;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <inheritdoc/>");
				code.AppendLine($@"		public StepStatus StepperBreak<TStep>(TStep step = default) where TStep : struct, IFunc<object, StepStatus>");
				code.AppendLine($@"		{{");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (step.Do(_<#= j #>) is Break)");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				return Break;");
				code.AppendLine($@"			}}");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return Continue;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Creates a shallow clone of this data structure.</summary>");
				code.AppendLine($@"		/// <returns>A shallow clone of this data structure.</returns>");
				code.AppendLine($@"		public IDataStructure<object> Clone()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new LinkStruct<T1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, T<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>((T1)this._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, this._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				);");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Converts the structure into an array.</summary>");
				code.AppendLine($@"		/// <returns>An array containing all the item in the structure.</returns>");
				code.AppendLine($@"		public	object[] ToArray()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return new object[]");
				code.AppendLine($@"			{{");
				code.AppendLine($@"				this._1");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				, this._<#= j #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			}};");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>");
				code.AppendLine($@"		/// <returns>The computed hash code.</returns>");
				code.AppendLine($@"		public override int GetHashCode()");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			return this._1.GetHashCode()");
				code.AppendLine($@"<# for (int j = 2; j <= i; j++) {{ #>");
				code.AppendLine($@"				^ this._<#= j #>.GetHashCode()");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		/// <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>");
				code.AppendLine($@"		/// <returns>Whether this object and the provided obj are value equal.</returns>");
				code.AppendLine($@"		public override bool Equals(object obj)");
				code.AppendLine($@"		{{");
				code.AppendLine($@"			if (!(obj is LinkStruct<T1");
				code.AppendLine($@"<# for (int k = 2; k <= i; k++) {{ #>");
				code.AppendLine($@"				, T<#= k #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>))");
				code.AppendLine($@"				return false;");
				code.AppendLine($@"");
				code.AppendLine($@"			LinkStruct<T1");
				code.AppendLine($@"<# for (int k = 2; k <= i; k++) {{ #>");
				code.AppendLine($@"				, T<#= k #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				> linkStruct = (LinkStruct<T1");
				code.AppendLine($@"<# for (int k = 2; k <= i; k++) {{ #>");
				code.AppendLine($@"				, T<#= k #>");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"				>)obj;");
				code.AppendLine($@"<# for (int j = 1; j <= i; j++) {{ #>");
				code.AppendLine($@"			if (!linkStruct._<#= j #>.Equals(this._<#= j #>))");
				code.AppendLine($@"				return false;");
				code.AppendLine($@"<# }} #>");
				code.AppendLine($@"			return true;");
				code.AppendLine($@"		}}");
				code.AppendLine($@"");
				code.AppendLine($@"		#endregion");
				code.AppendLine($@"	}}");
			}
			code.AppendLine($@"}}");
			return code.ToString();
		}
	}
}